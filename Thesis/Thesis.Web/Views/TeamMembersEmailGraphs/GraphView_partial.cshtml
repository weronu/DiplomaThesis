@{
    Layout = null;
}

@using Domain.DTOs
@using Domain.GraphClasses
@using Microsoft.Ajax.Utilities
@model Thesis.Web.Models.GraphViewModel
<div class="row">
    <div class="col-sm-12">
        <div class="col-md-4 col-md-offset-2 mydatepicker ">
            <input type="text" id="daterange" class="form-control datepicker-input">
            <i class="datepicker-icon glyphicon glyphicon-calendar fa fa-calendar"></i>
        </div>
    </div>
</div>

<div id="network_statistics_partial">
    
</div>

<div class="row">
    <div class="col-md-12">
        <div class="container-canvas">
            <div id="graphPie2d_Partial_Id"></div>
        </div>
    </div>
</div>
@if (@Model.Graph.Communities.Count > 0)
{
    <div class="row">
        <div class="col-md-6">
            <label class="top-ten-brokerage-label">COMMUNITIES</label>
            <div class="container-communities">
                <table class="table table-hover table-striped">
                    <tbody>
                    @foreach (Community<UserDto> community in @Model.Graph.Communities)
                    {
                        <tr>
                            <th>Community @community.Id</th>
                            <td>@community.CommunityNodes.Count nodes</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

        @if (@Model.RolesDetected)
        {

            <div class="col-md-6">
                <label class="top-ten-brokerage-label">SSRM Roles</label>
                <div class="container-communities">
                    <table class="table table-hover table-striped">
                        <tbody>
                            <tr>
                                <th>Leader</th>
                                <td>@Model.SsrmRolesDto.LeaderCount</td>
                            </tr>
                            <tr>
                                <th>Mediator</th>
                                <td>@Model.SsrmRolesDto.MediatorsCount</td>
                            </tr>
                            <tr>
                                <th>OuterMost</th>
                                <td>@Model.SsrmRolesDto.OutermostCount</td>
                            </tr>
                            <tr>
                                <th>OuterMost</th>
                                <td>@Model.SsrmRolesDto.OutsiderCount</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
}




<div id="wrapper" class="graph-wrapper">
    <div id="mynetwork" class="graph-network"></div>
    <div id="loadingBar" class="loadingBar">
        <div class="outerBorder">
            <div id="text" class="loading-bar-text">0%</div>
            <div id="border" class="border">
                <div id="bar" class="bar"></div>
            </div>
        </div>
    </div>
</div>
<pre id="eventSpan"></pre>
<div class="container-buttons">
    <div class="row">
        <div class="col-sm-3">
            <button id="findCommunitiesButton" type="button" class="btn btn-light">Find communities</button>
        </div>
        <div class="col-sm-3">
            <button id="createEgoNetworkButon" type="button" class="btn btn-light">Create Ego Network</button>
        </div>
        <div class="col-sm-3">
            <button id="findRolesButton" type="button" class="btn btn-light">Find Roles</button>
        </div>
        <div class="col-sm-3">
            <button id="findBrokerageButton" type="button" class="btn btn-light">Find Brokerage</button>
        </div>
    </div>
</div>


@if (@Model.BrokerageDetected)
{

    <label class="top-ten-brokerage-label">TOP 10 BROKERS</label>

    <div class="row">
        <div class="col-md-12">
            <div class="container-brokerage">
                <table class="table table-hover table-striped">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Name</th>
                            <th>Coordinator</th>
                            <th>Itinerant</th>
                            <th>Gatepeeker</th>
                            <th>Representative</th>
                            <th>Liaison</th>
                            <th>Total</th>
                        </tr>
                    </thead>

                    <tbody>
                        @{ int a = 1; }
                        @foreach (BrokerageDto broker in @Model.BrokerageDto)
                        {

                            <tr>
                                <th scope="row">@(a++)</th>
                                <td>@broker.Name</td>
                                <td>@broker.Coordinator</td>
                                <td>@broker.Itinerant</td>
                                <td>@broker.Gatepeeker</td>
                                <td>@broker.Representative</td>
                                <td>@broker.Liaison</td>
                                <td>@broker.TotalBrokerageScore</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="container-canvas">
                <div id="graph2d_Partial_Id"></div>
            </div>
        </div>
    </div>
                            }

<script type="text/javascript">
    blockUI();
    $(document).ready(function () {

        $('#daterange').daterangepicker({
            "autoApply": true,
            "startDate": "@Html.Raw(Model.FromDate.FormatInvariant("MM/dd/yyyy"))",
            "endDate":  "@Html.Raw(Model.ToDate.FormatInvariant("MM/dd/yyyy"))"
        });


        $('#daterange').on('apply.daterangepicker', function (ev, picker) {

            var startDate = new Date(picker.startDate);
            var stopDate = new Date(picker.endDate);

            var startMonth = "";
            if ((startDate.getMonth() + 1) < 10) {
                startMonth = '0' + (startDate.getMonth() + 1);
            } else {
                startMonth = startDate.getMonth() + 1;
            }
            var startDay = '';
            if ((startDate.getDate()) < 10) {
                startDay = '0' + (startDate.getDate());
            } else {
                startDay = startDate.getDate();
            }
            var fromDate = startMonth + '/' + startDay+ '/' + startDate.getFullYear();


            var endMonth = '';
            if ((stopDate.getMonth() + 1) < 10) {
                endMonth = '0' + (stopDate.getMonth() + 1);
            } else {
                endMonth = stopDate.getMonth() + 1;
            }
            var stopDay = '';
            if ((stopDate.getDate()) < 10) {
                stopDay = '0' + (stopDate.getDate());
            } else {
                stopDay = stopDate.getDate();
            }
            var toDate = endMonth + '/' + stopDay + '/' + stopDate.getFullYear();

            var data = JSON.stringify({
                'from': fromDate,
                'to': toDate,
                'selectedTeamMemberId': $("#teamMembersDropdown").find(":selected").val()
            });

            $.ajax({
                async: true,
                url: "@Url.Action("ApplyDateRange", "TeamMembersEmailGraphs")",
                data: data,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (partialView) {
                    $('#graphView_Partial_Id').html(partialView);
                    unblockUI();
                },
                error: function (xhr, data) {
                    toastr.error(xhr.statusText, "Error", {
                        "timeOut": "0",
                        "extendedTimeout": "0"
                    });
                    unblockUI();
                }
            });

        });

        viewStatistics();
        var network = GraphVis();
        viewDomainGraph();


        var clickedNodeId;

        network.on("click", function (params) {
            clickedNodeId = this.getNodeAt(params.pointer.DOM)
        });

        var findCommunittiesButton = $("#findCommunitiesButton");
        var createEgoNetworkButon = $("#createEgoNetworkButon");
        var findRolesButton = $("#findRolesButton");
        var findBrokerageButton = $("#findBrokerageButton");

        findCommunittiesButton.click(function (e) {
            e.preventDefault();
            findCommunities();
            return false;
        });

        createEgoNetworkButon.click(function (e) {
            e.preventDefault();
            if (clickedNodeId !== undefined) {
                createEgoNetwork(clickedNodeId);
            } else {
                toastr.warning("Please select ego center by click on node.", "Warning", {
                    "timeOut": "2000",
                    "extendedTimeout": "2000"
                });
            }
        });

        findRolesButton.click(function (e) {
            e.preventDefault();
            findRoles();
            return false;
        });


        findBrokerageButton.click(function (e) {
            e.preventDefault();
            findBrokerage();
            return false;
        });

        unblockUI();
    });

    function createEgoNetwork(egoNetworkCenterId) {
        blockUI();

        var data = JSON.stringify({
            'graphViewModel': @Html.Raw(Json.Encode(@Model)),
            'egoNetworkCenterId': egoNetworkCenterId
        });

        if (egoNetworkCenterId === undefined) {
            toastr.warning("Please select ego center by click on node.", "Warning", {
                "timeOut": "2000",
                "extendedTimeout": "02000"
            });
        }

        $.ajax({
            url: "@Url.Action("CreateEgoNetwork", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: data,
            success: function (partialView) {
                $('#graphView_Partial_Id').html(partialView);
                unblockUI();
            },
            error: function (xhr, data) {
                toastr.error(xhr.statusText, "Error", {
                    "timeOut": "2000",
                    "extendedTimeout": "2000"
                });
                unblockUI();
            }
        });
        return false;
    }

    function findCommunities() {
        blockUI();
        $.ajax({
            url: "@Url.Action("FindCommunities", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            success: function(partialView) {
                $('#graphView_Partial_Id').html(partialView);
                unblockUI();
            },
            error: function (xhr, data) {
                toastr.error(xhr.statusText, "Error", {
                    "timeOut": "2000",
                    "extendedTimeout": "2000"
                });
                unblockUI();
            }
        });
    }

    function findRoles() {

        blockUI();
        $.ajax({
            url: "@Url.Action("FindRoles", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            success: function(partialView) {

                $('#graphView_Partial_Id').html(partialView);
                unblockUI();
            },
            error: function(xhr, data) {
                toastr.error(xhr.statusText,
                    "Error",
                    {
                        "timeOut": "2000",
                        "extendedTimeout": "2000"
                    });
                unblockUI();
            }
        });
        return false;
    }

    function findBrokerage() {

        blockUI();
        $.ajax({
            url: "@Url.Action("FindBrokerage", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            success: function(partialView) {
                $('#graphView_Partial_Id').html(partialView);
                drawBrokerage();
                unblockUI();
            },
            error: function(xhr, data) {
                toastr.error(xhr.statusText,
                    "Error",
                    {
                        "timeOut": "2000",
                        "extendedTimeout": "2000"
                    });
                unblockUI();
            }
        });
    }

    function drawBrokerage() {

        blockUI();
        $.ajax({
            url: "@Url.Action("DrawBrokerageGraph", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            success: function(partialView) {
                $('#graph2d_Partial_Id').html(partialView);

                unblockUI();
            },
            error: function(xhr) {
                toastr.error(xhr.statusText,
                    "Error",
                    {
                        "timeOut": "2000",
                        "extendedTimeout": "2000"
                    });
                unblockUI();
            }
        });
        unblockUI();
        return false;
    }

        function viewDomainGraph() {
            blockUI();
            $.ajax({
                async: true,
                url: "@Url.Action("DrawEmailDomainsGraph", "TeamMembersEmailGraphs")",
                data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (partialView) {
                    $('#graphPie2d_Partial_Id').html(partialView);
                    unblockUI();
                },
                error: function (xhr, data) {
                    toastr.error(xhr.statusText, "Error", {
                        "timeOut": "2000",
                        "extendedTimeout": "2000"
                    });
                    unblockUI();
                }
            });
            unblockUI();
            return false;
        }

    function viewStatistics() {

        $.ajax({
            async: true,
            url: "@Url.Action("DrawNetworkStatistics", "TeamMembersEmailGraphs")",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            success: function (partialView) {
                $('#network_statistics_partial').html(partialView);
                unblockUI();
            },
            error: function (xhr, data) {
                toastr.error(xhr.statusText, "Error", {
                    "timeOut": "2000",
                    "extendedTimeout": "2000"
                });
                unblockUI();
            }
        });
        unblockUI();
        return false;
    }

    function GraphVis() {
        var nodes = @Html.Raw(Json.Encode(Model.GraphDto.nodes));
        var edges = @Html.Raw(Json.Encode(Model.GraphDto.edges));

        // create a network
        var container = document.getElementById('mynetwork');

        // provide the data in the vis format
        var data = {
            nodes: nodes,
            edges: edges
        };
        var options = {
            nodes: {
                shape: 'dot',
                size: 10,
                borderWidth: 1,
                color: {
                    background: '#f5cbee',
                    border: '#dcb7d7'
                }
            },
            interaction: { hover: true },
            layout: {
                improvedLayout: false
            },
            physics: {
                forceAtlas2Based: {
                    gravitationalConstant: -26,
                    centralGravity: 0.005,
                    springLength: 230,
                    springConstant: 0.18
                },
                maxVelocity: 146,
                solver: 'forceAtlas2Based',
                timestep: 0.35,
                stabilization: {
                    enabled: true,
                    iterations: 2000,
                    updateInterval: 25
                }
            },
            groups: {
                0: {
                    color: {
                        background: '#f5cbee',
                        border: '#dcb7d7',
                        hover: '#dcb7d7',
                        highlight: {
                            background: '#dcb7d7',
                            border: '#BD9DB8'
                        }
                    }
                }
            }
        };

        var mynetwork1 = document.getElementById('mynetwork');
        var x = - mynetwork1.clientWidth / 2 - 750;
        var y = - mynetwork1.clientHeight / 2 - 350;
        var step = 70;

        if (@Html.Raw(Json.Encode(Model.RolesDetected)) === true)
        {
            nodes.push({ id: 5000, x: x + 100, y: y + 0 * step, label: 'Leader', shape: 'star', color:'#721549', value: 1, fixed: true, physics:false, chosen: false});
            nodes.push({ id: 5001, x: x + 100, y: y + 1 * step, label: 'Mediator', shape: 'square', color: '#721549', value: 1, fixed: true,  physics:false, chosen: false});
            nodes.push({ id: 5002, x: x + 100, y: y + 2 * step, label: 'Outermost', shape: 'triangle', color: '#721549', value: 1, fixed: true,  physics:false, chosen: false});
            nodes.push({ id: 5003, x: x + 100, y: y + 3 * step, label: 'Outsider', shape: 'triangleDown', color: '#721549', value: 1, fixed: true,  physics:false, chosen: false});
            nodes.push({ id: 5004, x: x + 100, y: y + 4 * step, label: 'Not detected', shape: 'dot', color: '#721549', value: 1, fixed: true,  physics:false, chosen:false});
        }

        if (@Html.Raw(Json.Encode(Model.Graph.Communities.Count > 0)))
        {
            var communities = @Html.Raw(Json.Encode(Model.Graph.Communities));
            for (var i = 0, len = communities.length; i < len; i++)
            {
               nodes.push({ id: 6000 + i, x: x, y: y + i * step, label: 'Community ' + communities[i].Id, shape: 'dot', group: i + 1, color: '#721549', value: 1, fixed: true, physics: false, chosen: false});
           }
        }

                // initializing network
                var network = new vis.Network(container, data, options);

                network.on("stabilizationProgress",
            function(params) {
                    var maxWidth = 496;
                    var minWidth = 20;
                    var widthFactor = params.iterations / params.total;
                    var width = Math.max(minWidth, maxWidth * widthFactor);

                    document.getElementById('bar').style.width = width + 'px';
                    document.getElementById('text').innerHTML = Math.round(widthFactor * 100) + '%';
                });
        network.once("stabilizationIterationsDone",
            function() {
                    document.getElementById('text').innerHTML = '100%';
                    document.getElementById('bar').style.width = '496px';
                    document.getElementById('loadingBar').style.opacity = 0;
                    // really clean the dom element
                    setTimeout(function() { document.getElementById('loadingBar').style.display = 'none'; }, 500);
                });

        return network;
    }




</script>   

