@{
    Layout = null;
}

@using Microsoft.Ajax.Utilities
@model Thesis.Web.Models.GraphViewModel
<div class="row">
    <div class="col-sm-12">
        <div class="col-md-4 col-md-offset-2 mydatepicker ">
            <input type="text" id="daterange" class="form-control datepicker-input">
            <i class="datepicker-icon glyphicon glyphicon-calendar fa fa-calendar"></i>
        </div>
    </div>
</div>
<div id="wrapper" class="graph-wrapper">
    <div id="mynetwork" class="graph-network"></div>
    <div id="loadingBar" class="loadingBar">
        <div class="outerBorder">
            <div id="text" class="loading-bar-text">0%</div>
            <div id="border" class="border">
                <div id="bar" class="bar"></div>
            </div>
        </div>
    </div>
</div>
<pre id="eventSpan"></pre>
<div class="container-buttons">
    <div class="row">
        <div class="col-sm-3">
            <button id="findCommunitiesButton" type="button" class="btn btn-light">Find communities</button>
        </div>
        <div class="col-sm-3">
            <button id="createEgoNetworkButon" type="button" class="btn btn-light">Create Ego Network</button>
        </div>
        <div class="col-sm-3">
            <button id="findRolesButton" type="button" class="btn btn-light">Find Roles</button>
        </div>
    </div>
</div>
<div id="dialog" class="dialog" style="display: none"></div>

<script type="text/javascript">
    blockUI();
    $(document).ready(function () {
        $('#daterange').daterangepicker({
            "autoApply": true,
            "startDate": "@Html.Raw(Model.FromDate.FormatInvariant("MM/dd/yyyy"))",
            "endDate":  "@Html.Raw(Model.ToDate.FormatInvariant("MM/dd/yyyy"))"
        });


        $('#daterange').on('apply.daterangepicker', function (ev, picker) {

            var startDate = new Date(picker.startDate);
            var stopDate = new Date(picker.endDate);

            var startMonth = '';
            if ((startDate.getMonth() + 1) < 10) {
                startMonth = '0' + (startDate.getMonth() + 1);
            } else {
                startMonth = startDate.getMonth() + 1;
            }
            var startDay = '';
            if ((startDate.getDate()) < 10) {
                startDay = '0' + (startDate.getDate());
            } else {
                startDay = startDate.getDate();
            }
            var fromDate = startMonth + '/' + startDay+ '/' + startDate.getFullYear();


            var endMonth = '';
            if ((stopDate.getMonth() + 1) < 10) {
                endMonth = '0' + (stopDate.getMonth() + 1);
            } else {
                endMonth = stopDate.getMonth() + 1;
            }
            var stopDay = '';
            if ((stopDate.getDate()) < 10) {
                stopDay = '0' + (stopDate.getDate());
            } else {
                stopDay = stopDate.getDate();
            }
            var toDate = endMonth + '/' + stopDay + '/' + stopDate.getFullYear();

            var data = JSON.stringify({
                'from': fromDate,
                'to': toDate,
                'selectedTeamMemberId': $("#teamMembersDropdown").find(":selected").val()
            });

            $.ajax({
                async: true,
                url: "@Url.Action("ApplyDateRange", "TeamMembersEmailGraphs")",
                data: data,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (partialView) {
                    $('#graphView_Partial_Id').html(partialView);
                    unblockUI();
                }
            });
        });

        GraphVis();

        var findCommunittiesButton = $("#findCommunitiesButton");
        var createEgoNetworkButon = $("#createEgoNetworkButon");
        var findRolesButton = $("#findRolesButton");

        //Attach event handler to submit button
        findCommunittiesButton.click(function (e) {
            e.preventDefault();
            findCommunities();
            return false;
        });

        createEgoNetworkButon.click(function (e) {
            e.preventDefault();
            createEgoNetwork();
            return false;
        });

        findRolesButton.click(function (e) {
            e.preventDefault();
            findRoles();
            return false;
        });

        unblockUI();
    });

    function createEgoNetwork() {
        blockUI();

        var data = JSON.stringify({
            'graphViewModel': @Html.Raw(Json.Encode(@Model))});

        $.ajax({
            url: "@Url.Action("CreateEgoNetwork", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: data,
            error: OnError,
            success: function (partialView) {
                $('#graphView_Partial_Id').html(partialView);
                unblockUI();
            }
        });
    }

    function findCommunities() {
        blockUI();
        $.ajax({
            url: "@Url.Action("FindCommunities", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            error: OnError,
            success: function (partialView) {
                $('#graphView_Partial_Id').html(partialView);
                unblockUI();
            }
        });
    }

    function findRoles() {

        blockUI();
        $.ajax({
            url: "@Url.Action("FindRoles", "TeamMembersEmailGraphs")",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(@Html.Raw(Json.Encode(@Model))),
            datatype: 'json',
            success: function (partialView) {
                $('#graphView_Partial_Id').html(partialView);
                unblockUI();
            }
        });
    }

    function GraphVis() {
        var nodes = @Html.Raw(Json.Encode(Model.GraphDto.nodes));
        var edges = @Html.Raw(Json.Encode(Model.GraphDto.edges));

        // create a network
        var container = document.getElementById('mynetwork');

        // provide the data in the vis format
        var data = {
            nodes: nodes,
            edges: edges
        };
        var options = {
            nodes: {
                shape: 'dot',
                size: 10,
                borderWidth: 1
            },
            interaction: { hover: true },
            layout: {
                improvedLayout: false
            }
            ,physics: {
                forceAtlas2Based: {
                    gravitationalConstant: -26,
                    centralGravity: 0.005,
                    springLength: 230,
                    springConstant: 0.18
                },
                maxVelocity: 146,
                solver: 'forceAtlas2Based',
                timestep: 0.35,
                stabilization: {
                    enabled:true,
                    iterations:2000,
                    updateInterval:25
                }
            }
    };
    // initializing network
        var network = new vis.Network(container, data, options);

        network.on("stabilizationProgress", function (params) {
            var maxWidth = 496;
            var minWidth = 20;
            var widthFactor = params.iterations / params.total;
            var width = Math.max(minWidth, maxWidth * widthFactor);

            document.getElementById('bar').style.width = width + 'px';
            document.getElementById('text').innerHTML = Math.round(widthFactor * 100) + '%';
        });
        network.once("stabilizationIterationsDone", function () {
            document.getElementById('text').innerHTML = '100%';
            document.getElementById('bar').style.width = '496px';
            document.getElementById('loadingBar').style.opacity = 0;
            // really clean the dom element
            setTimeout(function () { document.getElementById('loadingBar').style.display = 'none'; }, 500);
        });
    }
</script>

